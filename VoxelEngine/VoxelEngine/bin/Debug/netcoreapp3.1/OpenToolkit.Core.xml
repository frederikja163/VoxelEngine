<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenToolkit.Core</name>
    </assembly>
    <members>
        <member name="T:OpenToolkit.Core.ContextHandle">
            <summary>
            Represents a handle to an OpenGL or OpenAL context.
            </summary>
        </member>
        <member name="P:OpenToolkit.Core.ContextHandle.Handle">
            <summary>
            Gets a void* that represents the handle of this ContextHandle.
            </summary>
        </member>
        <member name="F:OpenToolkit.Core.ContextHandle.Zero">
            <summary>
            A read-only field that represents a handle that has been initialized to zero.
            </summary>
        </member>
        <member name="M:OpenToolkit.Core.ContextHandle.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenToolkit.Core.ContextHandle"/> struct with the specified handle.
            </summary>
            <param name="h">A System.IntPtr containing the value for this instance.</param>
        </member>
        <member name="M:OpenToolkit.Core.ContextHandle.#ctor(System.Void*)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenToolkit.Core.ContextHandle"/> struct.
            </summary>
            <param name="handle">The handle.</param>
        </member>
        <member name="M:OpenToolkit.Core.ContextHandle.op_Explicit(OpenToolkit.Core.ContextHandle)~System.IntPtr">
            <summary>
            Converts the specified ContextHandle to the equivalent IntPtr.
            </summary>
            <param name="c">The ContextHandle to convert.</param>
            <returns>A System.IntPtr equivalent to the specified ContextHandle.</returns>
        </member>
        <member name="M:OpenToolkit.Core.ContextHandle.op_Explicit(OpenToolkit.Core.ContextHandle)~System.Void*">
            <summary>
            Converts the specified ContextHandle to the equivalent void*.
            </summary>
            <param name="c">The ContextHandle to convert.</param>
            <returns>A System.IntPtr equivalent to the specified ContextHandle.</returns>
        </member>
        <member name="M:OpenToolkit.Core.ContextHandle.op_Explicit(System.IntPtr)~OpenToolkit.Core.ContextHandle">
            <summary>
            Converts the specified IntPtr to the equivalent ContextHandle.
            </summary>
            <param name="p">The System.IntPtr to convert.</param>
            <returns>A ContextHandle equivalent to the specified IntPtr.</returns>
        </member>
        <member name="M:OpenToolkit.Core.ContextHandle.op_Explicit(System.Void*)~OpenToolkit.Core.ContextHandle">
            <summary>
            Converts the specified void* to the equivalent ContextHandle.
            </summary>
            <param name="p">The System.IntPtr to convert.</param>
            <returns>A ContextHandle equivalent to the specified IntPtr.</returns>
        </member>
        <member name="M:OpenToolkit.Core.ContextHandle.op_Equality(OpenToolkit.Core.ContextHandle,OpenToolkit.Core.ContextHandle)">
            <summary>
            Compares two ContextHandles for equality.
            </summary>
            <param name="left">The ContextHandle to compare.</param>
            <param name="right">The ContextHandle to compare to.</param>
            <returns>True if left is equal to right; false otherwise.</returns>
        </member>
        <member name="M:OpenToolkit.Core.ContextHandle.op_Inequality(OpenToolkit.Core.ContextHandle,OpenToolkit.Core.ContextHandle)">
            <summary>
            Compares two ContextHandles for inequality.
            </summary>
            <param name="left">The ContextHandle to compare.</param>
            <param name="right">The ContextHandle to compare to.</param>
            <returns>True if left is not equal to right; false otherwise.</returns>
        </member>
        <member name="M:OpenToolkit.Core.ContextHandle.ToString">
            <inheritdoc />
        </member>
        <member name="M:OpenToolkit.Core.ContextHandle.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:OpenToolkit.Core.ContextHandle.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:OpenToolkit.Core.ContextHandle.CompareTo(OpenToolkit.Core.ContextHandle)">
            <inheritdoc />
        </member>
        <member name="M:OpenToolkit.Core.ContextHandle.Equals(OpenToolkit.Core.ContextHandle)">
            <inheritdoc />
        </member>
        <member name="T:OpenToolkit.Core.Exceptions.BindingsNotRewrittenException">
            <summary>
            Represents exceptions thrown when a binding method is called and the bindings have not been rewritten by Rewrite.exe.
            </summary>
        </member>
        <member name="M:OpenToolkit.Core.Exceptions.BindingsNotRewrittenException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenToolkit.Core.Exceptions.BindingsNotRewrittenException"/> class.
            </summary>
        </member>
        <member name="T:OpenToolkit.Core.Exceptions.ExtensionNotSupportedException">
            <summary>
            Represents exceptions related to API extensions.
            </summary>
        </member>
        <member name="P:OpenToolkit.Core.Exceptions.ExtensionNotSupportedException.Extension">
            <summary>
            Gets the name of the extension.
            </summary>
        </member>
        <member name="M:OpenToolkit.Core.Exceptions.ExtensionNotSupportedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenToolkit.Core.Exceptions.ExtensionNotSupportedException"/> class.
            </summary>
            <param name="extension">The name of the extension.</param>
        </member>
        <member name="M:OpenToolkit.Core.Exceptions.ExtensionNotSupportedException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenToolkit.Core.Exceptions.ExtensionNotSupportedException"/> class.
            </summary>
            <param name="message">The error message of the ExtensionNotSupportedException.</param>
            <param name="extension">The name of the extension.</param>
        </member>
        <member name="T:OpenToolkit.Core.Extensions.ExtensionBase">
            <summary>
            Base class for extensions.
            </summary>
        </member>
        <member name="M:OpenToolkit.Core.Extensions.ExtensionBase.#ctor(System.String,AdvancedDLSupport.ImplementationOptions)">
            <inheritdoc cref="T:AdvancedDLSupport.NativeLibraryBase"/>
        </member>
        <member name="P:OpenToolkit.Core.Extensions.ExtensionBase.NameContainer">
            <inheritdoc />
        </member>
        <member name="M:OpenToolkit.Core.Extensions.ExtensionBase.IsExtensionPresent(System.String)">
            <inheritdoc />
        </member>
        <member name="M:OpenToolkit.Core.Extensions.ExtensionBase.GetProcAddress(System.String)">
            <inheritdoc />
        </member>
        <member name="M:OpenToolkit.Core.Extensions.ExtensionBase.GetEnumValue(System.String)">
            <inheritdoc />
        </member>
        <member name="T:OpenToolkit.Core.Extensions.ExtensionLoader">
            <summary>
            Loader class for API extensions.
            </summary>
            <typeparam name="TLibraryNameContainer">The library name container for the loader.</typeparam>
        </member>
        <member name="M:OpenToolkit.Core.Extensions.ExtensionLoader.LoadExtension``1(OpenToolkit.Core.Extensions.IAPIExtension)">
            <summary>
            Loads the API for the given extension, using the base API.
            </summary>
            <param name="baseAPI">The base API instance.</param>
            <typeparam name="TExtension">The extension type.</typeparam>
            <returns>The extension.</returns>
            <exception cref="T:OpenToolkit.Core.Exceptions.ExtensionNotSupportedException">Thrown if the API doesn't support the extension.</exception>
        </member>
        <member name="M:OpenToolkit.Core.Extensions.ExtensionLoader.GetAPIExtensionMetadata``1">
            <summary>
            Gets some required metadata about an API extension type.
            </summary>
            <typeparam name="TAPIExtension">The API extension type.</typeparam>
            <returns>The metadata.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the API type doesn't have a metadata attribute.
            </exception>
        </member>
        <member name="T:OpenToolkit.Core.Extensions.IAPIExtension">
            <summary>
            Defines the API surface of an API extension.
            </summary>
        </member>
        <member name="P:OpenToolkit.Core.Extensions.IAPIExtension.NameContainer">
            <summary>
            Gets the library name container for this extension.
            </summary>
        </member>
        <member name="M:OpenToolkit.Core.Extensions.IAPIExtension.IsExtensionPresent(System.String)">
            <summary>
            Determines whether or not the named extension is available.
            </summary>
            <param name="name">The name of the extension.</param>
            <returns>true if the extension is available; otherwise, false.</returns>
        </member>
        <member name="M:OpenToolkit.Core.Extensions.IAPIExtension.GetProcAddress(System.String)">
            <summary>
            Gets the address of an extension function.
            </summary>
            <param name="name">The name of the function.</param>
            <returns>The function pointer.</returns>
        </member>
        <member name="M:OpenToolkit.Core.Extensions.IAPIExtension.GetEnumValue(System.String)">
            <summary>
            Gets the value of the named extension enumeration member.
            </summary>
            <param name="name">The name of the enumeration member.</param>
            <returns>The value of the member.</returns>
        </member>
        <member name="T:OpenToolkit.Core.Loader.APILoader">
            <summary>
            Handles loading API class types into usable instances.
            </summary>
        </member>
        <member name="M:OpenToolkit.Core.Loader.APILoader.Load``1(OpenToolkit.Core.Loader.IPlatformLibraryNameContainer)">
            <summary>
            Loads the given API type into an active instance.
            </summary>
            <typeparam name="TAPI">The API type.</typeparam>
            <param name="nameLoader">The type that provides the name of the native library.</param>
            <returns>The API instance.</returns>
        </member>
        <member name="T:OpenToolkit.Core.Loader.ExtensionAttribute">
            <summary>
            Provides metadata for API extensions.
            </summary>
        </member>
        <member name="P:OpenToolkit.Core.Loader.ExtensionAttribute.ExtensionName">
            <summary>
            Gets or sets the name of the extension.
            </summary>
        </member>
        <member name="M:OpenToolkit.Core.Loader.ExtensionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenToolkit.Core.Loader.ExtensionAttribute"/> class.
            </summary>
            <param name="extensionName">The extension name.</param>
        </member>
        <member name="T:OpenToolkit.Core.Loader.IPlatformLibraryNameContainer">
            <summary>
            Defines a class that holds library names used on various platforms.
            </summary>
        </member>
        <member name="P:OpenToolkit.Core.Loader.IPlatformLibraryNameContainer.Windows">
            <summary>
            Gets the library name to use on Windows.
            </summary>
        </member>
        <member name="P:OpenToolkit.Core.Loader.IPlatformLibraryNameContainer.Linux">
            <summary>
            Gets the library name to use on Linux.
            </summary>
        </member>
        <member name="P:OpenToolkit.Core.Loader.IPlatformLibraryNameContainer.MacOS">
            <summary>
            Gets the library name to use on MacOS.
            </summary>
        </member>
        <member name="P:OpenToolkit.Core.Loader.IPlatformLibraryNameContainer.Android">
            <summary>
            Gets the library name to use on Android.
            </summary>
        </member>
        <member name="P:OpenToolkit.Core.Loader.IPlatformLibraryNameContainer.IOS">
            <summary>
            Gets the library name to use on iOS.
            </summary>
        </member>
        <member name="M:OpenToolkit.Core.Loader.IPlatformLibraryNameContainer.GetLibraryName">
            <summary>
            Gets the library name to use on the current platform.
            </summary>
            <returns>The library name.</returns>
        </member>
        <member name="T:OpenToolkit.Core.Loader.PlatformLibraryNameContainerBase">
            <summary>
            Base class for a class that holds library names used on various platforms.
            </summary>
        </member>
        <member name="P:OpenToolkit.Core.Loader.PlatformLibraryNameContainerBase.Linux">
            <inheritdoc/>
        </member>
        <member name="P:OpenToolkit.Core.Loader.PlatformLibraryNameContainerBase.Windows">
            <inheritdoc/>
        </member>
        <member name="P:OpenToolkit.Core.Loader.PlatformLibraryNameContainerBase.MacOS">
            <inheritdoc/>
        </member>
        <member name="P:OpenToolkit.Core.Loader.PlatformLibraryNameContainerBase.Android">
            <inheritdoc/>
        </member>
        <member name="P:OpenToolkit.Core.Loader.PlatformLibraryNameContainerBase.IOS">
            <inheritdoc/>
        </member>
        <member name="M:OpenToolkit.Core.Loader.PlatformLibraryNameContainerBase.GetLibraryName">
            <inheritdoc/>
        </member>
        <member name="T:OpenToolkit.Core.Native.AutoGeneratedAttribute">
            <summary>
            Indicates that this function is generated automatically by a tool.
            </summary>
        </member>
        <member name="P:OpenToolkit.Core.Native.AutoGeneratedAttribute.Category">
            <summary>
            Gets or sets the category of this OpenGL function.
            </summary>
        </member>
        <member name="P:OpenToolkit.Core.Native.AutoGeneratedAttribute.EntryPoint">
            <summary>
            Gets or sets the entry point of the OpenGL function.
            </summary>
        </member>
        <member name="P:OpenToolkit.Core.Native.AutoGeneratedAttribute.Version">
            <summary>
            Gets or sets the version of this OpenGL function.
            </summary>
        </member>
        <member name="P:OpenToolkit.Core.Native.AutoGeneratedAttribute.Source">
            <summary>
            Gets or sets the overloader that generated this function.
            </summary>
        </member>
        <member name="T:OpenToolkit.Core.Native.CountAttribute">
            <summary>
            Represents the count of a parameter.
            </summary>
        </member>
        <member name="P:OpenToolkit.Core.Native.CountAttribute.Count">
            <summary>
            Gets or sets the static count.
            </summary>
        </member>
        <member name="P:OpenToolkit.Core.Native.CountAttribute.Parameter">
            <summary>
            Gets or sets the deterministic parameter for this count.
            </summary>
        </member>
        <member name="P:OpenToolkit.Core.Native.CountAttribute.Computed">
            <summary>
            Gets or sets the computed count.
            </summary>
        </member>
        <member name="T:OpenToolkit.Core.Native.MarshalTk">
            <summary>
            Contains extra marshalling utilities that aren't available in the normal Marshal class.
            </summary>
        </member>
        <member name="M:OpenToolkit.Core.Native.MarshalTk.MarshalPtrToString(System.IntPtr)">
            <summary>
            Marshals a pointer to a null-terminated byte array to a new <c>System.String</c>.
            This method supports OpenTK and is not intended to be called by user code.
            </summary>
            <param name="ptr">A pointer to a null-terminated byte array.</param>
            <returns>
            A <c>System.String</c> with the data from <paramref name="ptr" />.
            </returns>
        </member>
        <member name="M:OpenToolkit.Core.Native.MarshalTk.MarshalStringToPtr(System.String)">
            <summary>
            Marshal a <c>System.String</c> to unmanaged memory.
            The resulting string is encoded in UTF8 and must be freed
            with <c>FreeStringPtr</c>.
            </summary>
            <param name="str">The <c>System.String</c> to marshal.</param>
            <returns>
            An unmanaged pointer containing the marshaled string.
            This pointer must be freed with <c>FreeStringPtr</c>.
            </returns>
        </member>
        <member name="M:OpenToolkit.Core.Native.MarshalTk.FreeStringPtr(System.IntPtr)">
            <summary>
            Frees a marshaled string that allocated by <c>MarshalStringToPtr</c>.
            </summary>
            <param name="ptr">An unmanaged pointer allocated with <c>MarshalStringToPtr</c>.</param>
        </member>
        <member name="M:OpenToolkit.Core.Native.MarshalTk.MarshalStringArrayToPtr(System.String[])">
            <summary>
            Marshals a <c>System.String</c> array to unmanaged memory by calling
            Marshal.AllocHGlobal for each element.
            </summary>
            <returns>An unmanaged pointer to an array of null-terminated strings.</returns>
            <param name="strArray">The string array to marshal.</param>
        </member>
        <member name="M:OpenToolkit.Core.Native.MarshalTk.FreeStringArrayPtr(System.IntPtr,System.Int32)">
            <summary>
            Frees a marshaled string that allocated by <c>MarshalStringArrayToPtr</c>.
            </summary>
            <param name="ptr">An unmanaged pointer allocated with <c>MarshalStringArrayToPtr</c>.</param>
            <param name="length">The length of the string array.</param>
        </member>
        <member name="T:OpenToolkit.Core.Native.SlotAttribute">
            <summary>
            Defines the slot index for a wrapper function.
            This type supports OpenTK and should not be
            used in user code.
            </summary>
        </member>
        <member name="F:OpenToolkit.Core.Native.SlotAttribute.Slot">
            <summary>
            Defines the slot index for a wrapper function.
            </summary>
        </member>
        <member name="M:OpenToolkit.Core.Native.SlotAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenToolkit.Core.Native.SlotAttribute"/> class.
            </summary>
            <param name="index">The slot index for a wrapper function.</param>
        </member>
        <member name="T:OpenToolkit.Core.Platform.PlatformException">
            <summary>
            Defines a platform-specific exception.
            </summary>
        </member>
        <member name="M:OpenToolkit.Core.Platform.PlatformException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenToolkit.Core.Platform.PlatformException"/> class.
            </summary>
        </member>
        <member name="M:OpenToolkit.Core.Platform.PlatformException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenToolkit.Core.Platform.PlatformException"/> class.
            </summary>
            <param name="message">A message explaining the cause for this exception.</param>
        </member>
        <member name="M:OpenToolkit.Core.MarshalUtility.PtrToStringUTF8(System.Byte*)">
            <summary>
                Converts a null-terminated UTF-8 string to a <see cref="T:System.String" />.
            </summary>
            <param name="ptr">The pointer to the null-terminated UTF-8 data.</param>
            <returns>The string.</returns>
        </member>
        <member name="T:OpenToolkit.IBindingsContext">
            <summary>
            Provides methods for querying available functions in a bindings context.
            </summary>
        </member>
        <member name="M:OpenToolkit.IBindingsContext.GetProcAddress(System.String)">
            <summary>
            Retrieves an unmanaged function pointer to the specified function on the specified bindings context.
            </summary>
            <param name="procName">An ASCII-encoded string that defines the name of the function.</param>
            <returns>
            A <see cref="T:System.IntPtr"/> that contains the address of procName or IntPtr.Zero,
            if the function is not supported by the drivers.
            </returns>
            <remarks>
            Note: some drivers are known to return non-zero values for unsupported functions.
            Typical values include 1 and 2 - inheritors are advised to check for and ignore these
            values.
            </remarks>
        </member>
    </members>
</doc>
